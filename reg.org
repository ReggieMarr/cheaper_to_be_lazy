#+TITLE: Reg
#+AUTHOR: Reginald Marr

* Part I
* Part II :literate_programming:
An expansion of part I. When you have a markup language you get these extra things like:
*** Latex (why and how its used)) -> inserting symbols and formulas in word
*** Org syntax :org:
Rich Contents - https://orgmode.org/manual/Markup-for-Rich-Contents.html

***** Examples :examples:

****** Meta examples.
- =org-store-link= and =org-insert-link=
- folding
- tagging
- spellcheck
****** [[file:~/.emacs.d/.local/straight/repos/org/doc/org-guide.org::*Tables][Tables]]
| Department | Budget | Size (People) | Spending per person |
|------------+--------+---------------+---------------------|
| Software   | 100000 |            80 |                1250 |
| Electrical |  30000 |            30 |                1000 |
| Systems    |  50000 |            25 |                2000 |
#+TBLFM: $4=$2/$3
****** Properties.
****** Markup files can be masters overseeing sub files.
*** Code blocks (in org)
Code blocks are implemented in a number of markup languages, typically to provide context around software specific documentation.
While org provides this it also includes the ability to execute said code blocks which can be leveraged to generate content.

**** Temperature Data Example
The following example will utilize [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html][Python code blocks]] to perform some simple analysis on some temperature data.

This bit of code doesn't do much but provides a means for retrieving the data in a format we can work with.

#+name: read_csv_header
#+begin_src python :exports code
# we'll import pandas to do some simple data manipulation
import pandas as pd

# read the previously downloaded data and store as a data series
df = pd.read_csv("./en_climate_hourly_ON_6153193_02-2022_P1H.csv")
temp_series = df['Temp (°C)'].dropna()
#+end_src

#+name: print_data_frame
#+begin_src python :noweb strip-export :exports both :results output :tangle print_data_frame.py
<<read_csv_header>>
print(df)
#+end_src

#+RESULTS: print_data_frame
#+begin_example
     Longitude (x)  Latitude (y)  ... Wind Chill Flag        Weather
0           -79.94         43.17  ...             NaN            NaN
1           -79.94         43.17  ...             NaN          Clear
2           -79.94         43.17  ...             NaN            NaN
3           -79.94         43.17  ...             NaN            NaN
4           -79.94         43.17  ...             NaN  Mostly Cloudy
..             ...           ...  ...             ...            ...
667         -79.94         43.17  ...             NaN            NaN
668         -79.94         43.17  ...             NaN            NaN
669         -79.94         43.17  ...             NaN            NaN
670         -79.94         43.17  ...             NaN            NaN
671         -79.94         43.17  ...             NaN            NaN

[672 rows x 30 columns]
#+end_example

We can then export the results of some code as raw org.

#+name: read_csv
#+begin_src python :noweb strip-export :export both :results output raw :tangle read_csv.py
<<read_csv_header>>

table_header_str = "| Location | Temp (Min °C) | Temp (Max °C) | Temp (Mean °C) |"
table_delim_str = "|-+-+-|"
table_format_str = "| {city} | {min} | {max} | {mean} |"

print(table_header_str)
print(table_delim_str)
print(table_format_str.format(city="Hamilton",
                              min=temp_series.min(), max=temp_series.max(), mean=temp_series.mean()))
#+end_src

#+RESULTS: read_csv
| Location | Temp (Min °C) | Temp (Max °C) |     Temp (Mean °C) |
|----------+---------------+---------------+--------------------|
| Hamilton |         -17.6 |           8.5 | -4.354656862745095 |

#+name: plot_temperature_data
#+begin_src python :noweb strip-export :results output raw :exports both :tangle plot_temp.py
<<read_csv_header>>

import plotly
import plotly.graph_objs as go

image_filename = "temp_series.png"
layout = go.Layout(
    title="Hamilton Hourly Temp",
    paper_bgcolor='rgba(0.67,0.67,0.67,0)',
    plot_bgcolor='rgb(255,255,255)',
    xaxis=dict(
        title='Samples'
    ),
    yaxis=dict(
        hoverformat='.2f'
    )
)
data  = go.Data([
            go.Scatter(
              y = temp_series,
        )])
fig = go.Figure(data=data, layout=layout)
fig.write_image(image_filename)
plotly.offline.plot( fig, filename="temp_series.html", image_filename='temp_series',
                     image='png', auto_open=False)

print(f"[[file:{image_filename}]]")
#+end_src

#+RESULTS: plot_temperature_data
[[file:temp_series.png]]


**** Sequence Diagram Example
#+NAME: org_to_ppx
#+HEADER: :file org_to_ppx.png
#+BEGIN_SRC plantuml :results drawer :tangle org_to_ppx_sd.puml
autonumber 10 10 "<b>[000]"
Bob -> Alice : Authentication Request
Bob <- Alice : Authentication Response

autonumber stop
Bob -> Alice : dummy

autonumber resume "<font color=red><b>Message 0  "
Bob -> Alice : Yet another authentication Request
Bob <- Alice : Yet another authentication Response

autonumber stop
Bob -> Alice : dummy

autonumber resume 1 "<font color=blue><b>Message 0  "
Bob -> Alice : Yet another authentication Request
Bob <- Alice : Yet another authentication Response
#+END_SRC

*** Literate Programming
