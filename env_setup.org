#+TITLE: Env_setup

* Overview

An intrisinc part of document generation using a text based interface is the tools utilized to create said documentation.
This document is meant to provide a general guide for getting a beginners and advanced setup with all the neccessary prerequisites.

** Linux
*** Base Packages
**** Git
Most Linux distributions will come with git pre-installed.
If this is not the case it can be installed using the following commands:
- Ubuntu/Debian ::
  #+begin_src sh
    sudo apt update && sudo apt install git -y
  #+end_src
- Manjaro/Arch ::
  #+begin_src sh
    sudo pacman -Syu && sudo pacman -S git
  #+end_src
**** Python
Python is packaged on most systems. Utilizing anaconda can be useful for easy env and package management.
The guide to install is [[https://docs.anaconda.com/anaconda/install/linux/][found online here.]]
The following python packages are also required.
- Pandas
- Numpy
- Plotly
- Plotly-Orca
Using anaconda these can be installed =conda install=
#+begin_src sh
conda install numpy
conda install plotly
conda install -c plotly plotly-orca
#+end_src
**** Pandoc
- Ubuntu/Debian ::
  #+begin_src sh
    sudo install pandoc
  #+end_src
- Manjaro/Arch ::
  #+begin_src sh
    sudo pacman -S pandoc
  #+end_src
**** Hugo
Information on installing hugo is provided [[https://gohugo.io/getting-started/installing/][here]].

*** Editor setup
**** Vscode (beginner-friendly)
VSCode is a beginner friendly text editor with community and corporate support (from Microsoft).
Installation of vscode is described [[https://code.visualstudio.com/docs/setup/linux][here]].
The following keybindings are recommended to provide a minimal setup to follow along with.
- vscodevim ::
  A vim emulator which provides a modal text editing experience and key bindings based on the viml key language.
- vscode-python ::
  An extension which provides syntax highlighting and autocompletion.
- org-mode ::
  An extension which provides syntax highlighting, autocompletion and rendering compatible with the org markup language.
- vscode-markdown ::
  An extension which provides syntax highlighting, autocompletion and rendering compatible with the markdown markup language.
**** Doom-Emacs (advanced)
Emacs is a highly extensible/customizable lisp interpreter primarily utilized as a text editor.
While the "Vanilla" installation of emacs provides minimal user friendly plugins collections of plugins are provided as distributions. One of the most popular (and recommended) is a distributions known as doom emacs.
To install it is recommended to follow the [[https://github.com/hlissner/doom-emacs/blob/master/docs/getting_started.org#on-linux][getting started guide]] to install emacs itself and the required dependencies.
To install the distribution =git clone= the repo and utilize the [[https://github.com/hlissner/doom-emacs#install][install script]].

** Windows

*** Base Packages
**** Git
Git is a version controlling command line application useful for maintaining releases of text based content.
The installation guide can be found [[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git][here.]]
**** Python
Python is packaged on most systems. Utilizing anaconda can be useful for easy env and package management.
The guide to install is [[https://docs.anaconda.com/anaconda/install/windows/][found online here.]]
The following python packages are also required.
- Pandas
- Numpy
- Plotly
- Plotly-Orca
Using anaconda these can be installed =conda install=
#+begin_src sh
conda install numpy
conda install plotly
conda install -c plotly plotly-orca
#+end_src
**** Pandoc
Pandoc is used to convert between a variety of documentation formats. It can be installed for free by following the guide and downloading the install executable [[https://pandoc.org/installing.html][found here.]]
**** Hugo
Information on installing hugo is provided [[https://gohugo.io/getting-started/installing/][here]].

*** Editor setup
**** Vscode (beginner-friendly)
VSCode is a beginner friendly text editor with community and corporate support (from Microsoft).
Installation of vscode is described [[https://code.visualstudio.com/docs/setup/windows][here.]]
The following keybindings are recommended to provide a minimal setup to follow along with.
- vscodevim ::
  A vim emulator which provides a modal text editing experience and key bindings based on the viml key language.
- vscode-python ::
  An extension which provides syntax highlighting and autocompletion.
- org-mode ::
  An extension which provides syntax highlighting, autocompletion and rendering compatible with the org markup language.
- vscode-markdown ::
  An extension which provides syntax highlighting, autocompletion and rendering compatible with the markdown markup language.
**** Doom-Emacs (advanced)
Emacs is a highly extensible/customizable lisp interpreter primarily utilized as a text editor.
While the "Vanilla" installation of emacs provides minimal user friendly plugins collections of plugins are provided as distributions. One of the most popular (and recommended) is a distributions known as doom emacs.
To install it is recommended to follow the [[https://github.com/hlissner/doom-emacs/blob/master/docs/getting_started.org#on-windows][getting started guide]] to install emacs itself and the required dependencies.
To install the distribution =git clone= the repo and utilize the [[https://github.com/hlissner/doom-emacs#install][install script]].

***** Custom configuration

****** Env Vars and PATH
Note if installing by downloading executables and using =git bash= it is critical that environment variables and paths are set properly.

In windows go to Control Panel -> User Accounts -> User Accounts -> Change my environment variables.

Edit/Create the =Path= environment variable such that it looks like this (where "reggi" is your =USERNAME=)

[[file:env_vars.png][file:~/Downloads/cheaper_to_be_lazy/env_vars.png]]

Edit/Create the =HOME= environment variable such that it looks like this (where "reggi" is your =USERNAME=)

[[file:home_var.png][file:~/Downloads/cheaper_to_be_lazy/home_var.png]]

If using anaconda the following may be useful when added to the =~/.doom.d/config.el=
#+begin_src emacs-lisp

(add-to-list 'exec-path (format "c:/Users/%s/anaconda3/" (getenv "USERNAME")))
(add-to-list 'exec-path (format "c:/Users/%s/anaconda3/Library" (getenv "USERNAME")))
(add-to-list 'exec-path (format "c:/Users/%s/anaconda3/Library/bin" (getenv "USERNAME")))
(add-to-list 'exec-path (format "c:/Users/%s/anaconda3/Library/mingw-w64/bin/" (getenv "USERNAME")))
(add-to-list 'exec-path (format "c:/Users/%s/anaconda3/condabin/" (getenv "USERNAME")))
(add-to-list 'exec-path (format "c:/Users/%s/anaconda3/Scripts/" (getenv "USERNAME")))
(setq org-babel-python-command (format "/c/Users/%s/anaconda3/python.exe" (getenv "USERNAME")))

#+end_src

This ensures that the path to =fd= and =ripgrep= are set proper.

#+begin_src emacs-lisp
(add-to-list 'exec-path (format "c:/Users/%s/Downloads/fd-v8.3.2-x86_64-pc-windows-msvc:" (getenv "USERNAME")))
(add-to-list 'exec-path (format "c:/Users/%s/Downloads/ripgrep-13.0.0-x86_64-pc-windows-msvc/ripgrep-13.0.0-x86_64-pc-windows-msvc/" (getenv "USERNAME")))
#+end_src
